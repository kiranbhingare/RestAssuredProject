Rest Assured: 
--------------------------------------------------------------------------------------------------------------------
REST Assured is a java library for testing RESTful web services
It is used to invoke REST web services and check response
Can be used to test XML as well as JSON based web services
It supports POST, GET, PUT, DELETE, OPTIONS, PATCH and HEAD requests and can be used to validate and verify the response of these requests
Can be integrated with testing frameworks like JUnit, TestNG etc
REST Assured is implemented in Groovy

It uses BDD style for testing. 

Prerequisite:
---------------------------------
Java
IDE (Eclipse, Intellij, etc.)
Maven
TestNG  

testng, restassured -> dependancy

Creating your own API's
-----------------------------------------------------
1. Install node.js
2. Intstall JSON server by   running following command
		npm install -g JSON-server
3. Start the JSON server with following command-
		JSON-server --watch db.JSON
--- db.JSON is an JSON file in which we are having all API (dummy) data

{
  "posts": [
    {
      "id": 1,
      "title": "JSON-server",
      "author": "typicode"
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "postId": 1
    }
  ],
  "profile": {
    "name": "typicode"
  }
}

--- If the file is not in the location then it will create the file with some dummy data in given location. 
--- After running above command it will give an url like:   http://localhost:3000
--- while opening the same in the browser it will show: You're successfully running JSON Server
--- If you are giving any specific part in the url then it will show the data for this 
	http://localhost:3000/posts
		
[
    {
      "id": 1,
      "title": "JSON-server",
      "author": "typicode"
    }
]

4. Create dummy api data (in same db.JSON by deleting the previous data)
	{
		"users" : [
			{
				"firstname" : "Kiran", 
				"lastname"	: "Bhingare", 
				"subjectid" : 1, 
				"id"		: 1
			}, 
			{
				"firstname" : "Henry", 
				"lastname"	: "Ford", 
				"subjectid" : 88, 
				"id"		: 101
			} 			
		], 
		"subjects": [
			{
				"name" : "Automation", 
				"id" 	 : 2
			}, 
			{
				"name" : "DevOps", 
				"id" 	 : 77
			} 		
		]		
	}
	
	Now run the api url: http://localhost:3000/users
	Then we should get the above data here.
	If want to get the data for subjects: 
		http://localhost:3000/subjects 
                

How to validate JSON Schema
--------------------------------------------------------------------------
-- JSON Schema is an IETF standard providing a format for what JSON data is required for a given application and how to interact with it. 
-- Applying such standards for a JSON document lets you enforce consistency and data validity across similar JSON data.
1. Create JSON Scheme
	-- Convert JSON to JSON schema from online link from google -> https://www.liquid-technologies.com/online-JSON-to-schema-converter
	-- Go to reqres.in and take the first request GET (List Users)
	-- Go to the response and copy it 
	-- Paste the response in JSON schema converter and click on generate schema
2. Add JSON Schema file in classpath
	-- Add the JSON schema in target/classes folder by creating schema.JSON (The classes folder visible in system explorer only)
3. Add Maven Dependancy for JSON Schema validator from restassured 
4. Create a new function to validate json response against schema
5. Run and Validate	
	-- If you want to validate the response then change the type of any parameter and check, test case will get failed. 
	
How to Validate the SOAP XML Response
----------------------------------------------------------------------------------------------------------------
1. Create a class
2. Create a function and annotate with @Test
3. Add base URI
4. Go to google and search for -> sample web service for testing
	-> Directly can use this -- http:// www.dneonline.com/calculator.asmx
	-> Add "wizdler" extension to the chrome for browsing WSDL
	-> Click on service description in url.
	-> Then this extension will get open and if you click on it, will show all the requests.
	-> Copy and paste the URI here in the baseURI -> http://www.dneonline.com/
5. Provide headers and body (by using given statement)
	-> To get the request body from the file
		-> Create a xml file at any location in your system explorer and add the xml for Add request in that xml file
		-> In that file instead of data types, I need to add some values. 
6. Get the file in the code
	-> The apache commons dependancy is needed for this. 
7. Add code to check the file exists
8. send post request
	-> pass the endpoint which is available in request body to the post request. 
9. Add the expected conditions and validation points
	-> It will give the response in the file with addResult. 
		
 Validate SOAP XML Response Body
 -------------------------------------------------------------------
 -> Go to freeformatter.com
 -> Click on xpath tester
 -> Paste the xml response from the console after running the test case in XMl input

 <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <soap:Body>
    <AddResponse xmlns="http://tempuri.org/">
      <AddResult>7</AddResult>
    </AddResponse>
  </soap:Body>
</soap:Envelope>

-> generate the xpath for AddResult and write it into the Xpath xpression, because we want to test this	
	//*:AddResult/text()
-> Click on evaluate xpath
-> It will give --> Text='7'
-> This xpath can be used in the code

XML Schema Validation
-----------------------------------------------------------------------------
--> It describes the structure of an XML document is written in XML. 
-> XML Schema or XSD (XML Schema Definition)
-> Sample XML document

<class>
	<student>
		<firstname>Kiran</firstname>
		<lastname>Bhingare</lastname>
		<age>26</age>
	</student>
</class>

-> XML Schema for above document
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:element name="class">
		<xs:complexType>  // because some child element is available in this class tag
			<xs:sequence> //sequence for child element apperance
				<xs:element name="student">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="firstname" type="xs:string">
							<xs:element name="lastname" type="xs:string">
							<xs:element name="age" type="xs:int">
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>

Validation of above schema: 
1. Create a get XML Schema (XSD)
	-> Go to google and search for xml schema generator
		-> freeformatter.com
		-> Copy the same xml for add request for the calculator result schema
		-> Paste the response in freeformatter XSD generator
		-> Instead of integer add some value and Generate the XSD
		-> Copy this generated XML Schema and create a new xsd file -> calculator.xsd
		-> Add this file in project classpath -> Right click -> build path -> configure -> source (will get the default classpath folder location here)
		-> Can add this file in src/main/java or /resources
		-> then the file will automatically added into target/classes folder
		-> click on project and build automatically, the the files might be visible in target folder
2. Add code to validate the XML Response against the XML Schema (XSD)
		-> If any changes is made in xsd file then build of the project need to be done after that to get the latest changes
		
		