Rest Assured: 
--------------------------------------------------------------------------------------------------------------------
REST Assured is a java library for testing RESTful web services
It is used to invoke REST web services and check response
Can be used to test XML as well as JSON based web services
It supports POST, GET, PUT, DELETE, OPTIONS, PATCH and HEAD requests and can be used to validate and verify the response of these requests
Can be integrated with testing frameworks like JUnit, TestNG etc
REST Assured is implemented in Groovy

It uses BDD style for testing. 

Prerequisite:
---------------------------------
Java
IDE (Eclipse, Intellij, etc.)
Maven
TestNG  

testng, restassured -> dependancy

Creating your own API's
-----------------------------------------------------
1. Install node.js
2. Intstall json server by   running following command
		npm install -g json-server
3. Start the json server with following command-
		json-server --watch db.json
--- db.json is an json file in which we are having all API (dummy) data

{
  "posts": [
    {
      "id": 1,
      "title": "json-server",
      "author": "typicode"
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "postId": 1
    }
  ],
  "profile": {
    "name": "typicode"
  }
}

--- If the file is not in the location then it will create the file with some dummy data in given location. 
--- After running above command it will give an url like:   http://localhost:3000
--- while opening the same in the browser it will show: You're successfully running JSON Server
--- If you are giving any specific part in the url then it will show the data for this 
	http://localhost:3000/posts
		
[
    {
      "id": 1,
      "title": "json-server",
      "author": "typicode"
    }
]

4. Create dummy api data (in same db.json by deleting the previous data)
	{
		"users" : [
			{
				"firstname" : "Kiran", 
				"lastname"	: "Bhingare", 
				"subjectid" : 1, 
				"id"		: 1
			}, 
			{
				"firstname" : "Henry", 
				"lastname"	: "Ford", 
				"subjectid" : 88, 
				"id"		: 101
			} 			
		], 
		"subjects": [
			{
				"name" : "Automation", 
				"id" 	 : 2
			}, 
			{
				"name" : "DevOps", 
				"id" 	 : 77
			} 		
		]		
	}
	
	Now run the api url: http://localhost:3000/users
	Then we should get the above data here.
	If want to get the data for subjects: 
		http://localhost:3000/subjects 
                

How to validate JSON Schema
--------------------------------------------------------------------------
1. Create JSON Scheme

